<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[F# Scribbles]]></title>
  <link href="http://udooz.github.io//atom.xml" rel="self"/>
  <link href="http://udooz.github.io//"/>
  <updated>2015-07-15T14:52:47+05:30</updated>
  <id>http://udooz.github.io//</id>
  <author>
    <name><![CDATA[M Sheik Uduman Ali]]></name>
    <email><![CDATA[udooz@outlook.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generate plain item list from a catalog in a web page]]></title>
    <link href="http://udooz.github.io//blog/2015/07/generate-plain-item-list-from-a-catalog-in-a-web-page/"/>
    <updated>2015-07-15T14:17:17+05:30</updated>
    <id>http://udooz.github.io//blog/2015/07/generate-plain-item-list-from-a-catalog-in-a-web-page</id>
    <content type="html"><![CDATA[<p>As part of my IoT related experiments, reading Exploring Ardunio book for some insight.  In order to get the list of electronic parts for the projects, <a href="http://exploringarduino.com/parts">http://exploringarduino.com/parts</a> list out all required items.  Here the excercise to take the HTML of the catalog from the web site using Chrome and then used F# script to get the plain list.</p>

<p>In the HTML, you can see the item title in the format of &ldquo;title={item name}&rdquo;</p>

<div><script src='https://gist.github.com/306c8c80717b24e2fb2e.js'></script>
<noscript><pre><code>&lt;div class=&quot;page-list page-list-ext &quot;&gt;
&lt;div class=&quot;page-list-ext-item&quot;&gt;&lt;div class=&quot;page-list-ext-image&quot;&gt;&lt;a href=&quot;http://exploringarduino.com/parts/p1uf-cap/?iframe=true&quot; rel=&quot;prettyPhoto&quot; &quot;=&quot;&quot; title=&quot;.1uF Electrolytic Capacitor&quot;&gt;&lt;img src=&quot;//exploringarduino.com/wp-content/uploads/2013/06/1uF-capacitor.jpg&quot; width=&quot;150&quot; alt=&quot;.1uF Electrolytic Capacitor&quot;&gt;&lt;/a&gt;&lt;/div&gt; &lt;h3 class=&quot;page-list-ext-title&quot;&gt;&lt;a href=&quot;http://exploringarduino.com/parts/p1uf-cap/?iframe=true&quot; rel=&quot;prettyPhoto&quot; &quot;=&quot;&quot; title=&quot;.1uF Electrolytic Capacitor&quot;&gt;.1uF Electrolytic Capacitor&lt;/a&gt;&lt;/h3&gt;&lt;/div&gt;</code></pre></noscript></div>


<p>I define a regex to parse that specific item on every line.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">open</span> <span class="nc">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nc">IO</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span><span class="p">.</span><span class="nn">Text</span><span class="p">.</span><span class="nc">RegularExpressions</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">parseLine</span> <span class="o">(</span><span class="n">line</span><span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">r</span> <span class="o">=</span> <span class="nn">Regex</span><span class="p">.</span><span class="nc">Match</span> <span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="s2">&quot;&quot;&quot;.*(title=</span><span class="se">\&quot;</span><span class="s2">(.*)</span><span class="se">\&quot;</span><span class="s2">).*&quot;&quot;&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="nn">Groups</span><span class="p">.</span><span class="err">[2]</span><span class="p">.</span><span class="nc">Value</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">parse</span> <span class="n">text</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">foldit</span> <span class="n">seq</span> <span class="o">=</span> <span class="nn">Seq</span><span class="p">.</span><span class="n">fold</span> <span class="o">(</span><span class="k">fun</span> <span class="n">acc</span> <span class="n">l</span> <span class="o">-&gt;</span> <span class="n">acc</span> <span class="o">+</span> <span class="nn">Environment</span><span class="p">.</span><span class="nc">NewLine</span> <span class="o">+</span> <span class="n">parseLine</span><span class="o">(</span><span class="n">l</span><span class="o">))</span> <span class="s2">&quot;&quot;</span> <span class="n">seq</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">|&gt;</span> <span class="n">foldit</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">writefile</span> <span class="n">content</span> <span class="o">=</span> <span class="nn">File</span><span class="p">.</span><span class="nc">WriteAllText</span><span class="o">(__</span><span class="n">OUTPUT__FILE</span><span class="o">,</span> <span class="n">content</span><span class="o">)</span>
</span><span class='line'><span class="nn">File</span><span class="p">.</span><span class="nc">ReadLines</span><span class="o">(__</span><span class="n">INPUT_FILE__</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">parse</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">writefile</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the outcome</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.1uF Electrolytic Capacitor
</span><span class='line'>100 ohm Resistor
</span><span class='line'>10kohm Potentiometer
</span><span class='line'>10kohm Resistor
</span><span class='line'>10uF Electrolytic Capacitor
</span><span class='line'>150ohm Resistor
</span><span class='line'>16x2 LCD
</span><span class='line'>1kohm Resistor
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance of large list on reverse function using F# and Scala]]></title>
    <link href="http://udooz.github.io//blog/2014/10/performance-of-large-list-on-reverse-function-using-f-number-and-scala/"/>
    <updated>2014-10-31T12:15:56+05:30</updated>
    <id>http://udooz.github.io//blog/2014/10/performance-of-large-list-on-reverse-function-using-f-number-and-scala</id>
    <content type="html"><![CDATA[<p>1000000
100000000
let l = [1..100000000];;
Real: 00:00:32.954, CPU: 00:00:34.593, GC gen0: 1030, gen1: 520, gen2: 9</p>

<p>val l : int list =
  [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21;
   22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40;
   41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59;
   60; 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77; 78;
   79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89; 90; 91; 92; 93; 94; 95; 96; 97;
   98; 99; 100; &hellip;]</p>

<blockquote><p>reverse l;;
Real: 00:01:05.544, CPU: 00:00:59.031, GC gen0: 517, gen1: 260, gen2: 14
val it : int list =
  [100000000; 99999999; 99999998; 99999997; 99999996; 99999995; 99999994;
   99999993; 99999992; 99999991; 99999990; 99999989; 99999988; 99999987;
   99999986; 99999985; 99999984; 99999983; 99999982; 99999981; 99999980;
   99999979; 99999978; 99999977; 99999976; 99999975; 99999974; 99999973;
   99999972; 99999971; 99999970; 99999969; 99999968; 99999967; 99999966;
   99999965; 99999964; 99999963; 99999962; 99999961; 99999960; 99999959;
   99999958; 99999957; 99999956; 99999955; 99999954; 99999953; 99999952;
   99999951; 99999950; 99999949; 99999948; 99999947; 99999946; 99999945;
   99999944; 99999943; 99999942; 99999941; 99999940; 99999939; 99999938;
   99999937; 99999936; 99999935; 99999934; 99999933; 99999932; 99999931;
   99999930; 99999929; 99999928; 99999927; 99999926; 99999925; 99999924;
   99999923; 99999922; 99999921; 99999920; 99999919; 99999918; 99999917;
   99999916; 99999915; 99999914; 99999913; 99999912; 99999911; 99999910;
   99999909; 99999908; 99999907; 99999906; 99999905; 99999904; 99999903;
   99999902; 99999901; &hellip;]</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse a list elements with plain code]]></title>
    <link href="http://udooz.github.io//blog/2014/10/reverse-a-list-elements-with-plain-code/"/>
    <updated>2014-10-31T10:37:25+05:30</updated>
    <id>http://udooz.github.io//blog/2014/10/reverse-a-list-elements-with-plain-code</id>
    <content type="html"><![CDATA[<p>How to reverse a list elements</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">reverse</span> <span class="kt">list</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">let</span> <span class="k">rec</span> <span class="n">rev</span> <span class="n">rlist</span> <span class="kt">list</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">hmatch</span> <span class="kt">list</span> <span class="k">with</span>
</span><span class='line'>            <span class="o">|</span> <span class="bp">[]</span> <span class="o">-&gt;</span> <span class="n">rlist</span>
</span><span class='line'>            <span class="o">|</span> <span class="n">h</span> <span class="o">::</span> <span class="n">t</span> <span class="o">-&gt;</span> <span class="n">rev</span> <span class="o">(</span><span class="n">h</span> <span class="o">::</span> <span class="n">rlist</span><span class="o">)</span> <span class="n">t</span>
</span><span class='line'>        <span class="n">rev</span> <span class="bp">[]</span> <span class="kt">list</span>
</span></code></pre></td></tr></table></div></figure>


<p>The &ldquo;rev&rdquo; is the inner function to recursively get the head of given list and prepend to the result.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">l</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="o">;</span> <span class="mi">3</span><span class="o">;</span> <span class="mi">5</span><span class="o">];;</span>
</span><span class='line'><span class="n">reverse</span> <span class="n">l</span><span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure>


<p> results [5; 3; 1]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyze Azure Cloud Service Performance Counters using F# and Deedle library]]></title>
    <link href="http://udooz.github.io//blog/2014/06/analyze-azure-cloudapps-performance-counters-using-f-number-and-deedle-library/"/>
    <updated>2014-06-17T08:53:04+05:30</updated>
    <id>http://udooz.github.io//blog/2014/06/analyze-azure-cloudapps-performance-counters-using-f-number-and-deedle-library</id>
    <content type="html"><![CDATA[<p>Analysing Windows performance counters is an interesting job for that we use many tools importantly Microsoft Excel.  To share the trends and improvements with graphical charts, Ops people rely on many tools.  As a developers, we shouldn&rsquo;t :).</p>

<p>Here, I use <a href="http://bluemountaincapital.github.io/Deedle/">Deedle &ndash; exploratory data library</a>, this is equivalent to Python&rsquo;s Pandas library.  Assume that one set of results are logged in a CSV file.</p>

<blockquote><p>Usually Microsoft Azure cloud service applications logs to table storage that can be exported to CSV files.</p></blockquote>

<p><strong>Import Deedle library</strong></p>

<p>Deedle can be downloaded as Nuget package.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="o">#</span><span class="nc">I</span> <span class="s2">&quot;DEEDLE-LIB-PATH</span><span class="err">\</span><span class="s2">Deedle.1.0.0&quot;</span><span class="o">;;</span>
</span><span class='line'><span class="o">#</span><span class="n">load</span> <span class="s2">&quot;Deedle.fsx&quot;</span><span class="o">;;</span>
</span><span class='line'><span class="k">open</span> <span class="nc">System</span><span class="o">;;</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Deedle</span><span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Import data and Analyze</strong></p>

<p>Frame is a tabular based data structure.  Let us import the CSV.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">perfCounters</span> <span class="o">=</span> <span class="nn">Frame</span><span class="p">.</span><span class="nc">ReadCsv</span><span class="o">(@</span><span class="s2">&quot;..</span><span class="err">\</span><span class="s2">WADPerformanceCountersTable.csv&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will return</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Binding session to '..\Deedle.1.0.0\../FSharp.Data.2.0.8/lib/net40/FSharp.Data.dll'...
</span><span class='line'>
</span><span class='line'>val perfCounters : Frame&lt;int,string> =
</span><span class='line'>  
</span><span class='line'>       PartitionKey RowKey                                                                                                                                                   Timestamp        EventTickCount:int64 DeploymentId                     Role                       RoleInstance                    CounterName                                       CounterValue 
</span><span class='line'>0   -> PKVALUE    ROWKEYVALUE 31-01-2014 06:39 6.35267E+17          84011bf63b79412a86b0087cab91bdfe ROLE_NAME ROLE_INSTANCE_NAME \Web Service(_Total)\Bytes Total/Sec              55.204232    
</span><span class='line'>1   -> PKVALUE    ROWKEYVALUE 31-01-2014 06:39 6.35267E+17          84011bf63b79412a86b0087cab91bdfe ROLE_NAME ROLE_INSTANCE_NAME \ASP.NET Applications(__Total__)\Requests/Sec     0.011111     
</span><span class='line'>2   -> PKVALUE    ROWKEYVALUE 31-01-2014 06:39 6.35267E+17          84011bf63b79412a86b0087cab91bdfe ROLE_NAME ROLE_INSTANCE_NAME \ASP.NET Applications(__Total__)\Errors Total/Sec 0            
</span><span class='line'>3   -> PKVALUE    ROWKEYVALUE 31-01-2014 06:39 6.35267E+17          84011bf63b79412a86b0087cab91bdfe ROLE_NAME ROLE_INSTANCE_NAME \Memory\Available MBytes                          384
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Let us group the result by counter name</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">groupedPerf</span> <span class="o">=</span> <span class="n">perfCounters</span><span class="o">.</span><span class="nc">GroupRowsBy</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;(</span><span class="s2">&quot;CounterName&quot;</span><span class="o">);;</span>
</span></code></pre></td></tr></table></div></figure>


<p>will results</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val groupedPerf : Frame&lt;(string * int),string> =
</span><span class='line'>  
</span><span class='line'>                                            PartitionKey RowKey                                                                                                                                                   Timestamp        EventTickCount:int64 DeploymentId                     Role                       RoleInstance                    CounterName                          CounterValue 
</span><span class='line'>\Web Service(_Total)\Bytes Total/Sec 0   -> PKVALUE ROWKEYVALUE 31-01-2014 06:39 6.35267E+17          84011bf63b79412a86b0087cab91bdfe ROLE_NAME ROLE_INSTANCE_NAME \Web Service(_Total)\Bytes Total/Sec 55.204232    
</span><span class='line'>\Web Service(_Total)\Bytes Total/Sec 7   -> PKVALUE ROWKEYVALUE 31-01-2014 06:39 6.35267E+17          84011bf63b79412a86b0087cab91bdfe ROLE_NAME ROLE_INSTANCE_NAME  \Web Service(_Total)\Bytes Total/Sec 799.596468   
</span><span class='line'>\Web Service(_Total)\Bytes Total/Sec 14  -> PKVALUE ROWKEYVALUE 31-01-2014 06:39 6.35267E+17          84011bf63b79412a86b0087cab91bdfe ROLE_NAME ROLE_INSTANCE_NAME  \Web Service(_Total)\Bytes Total/Sec 33.555829</span></code></pre></td></tr></table></div></figure>


<p>You can do whatever the analysis you want.  For example, I want to calculate average of &ldquo;Available MBytes&rdquo;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">groupedPerf</span><span class="o">.</span><span class="nn">Rows</span><span class="p">.</span><span class="err">[</span><span class="nc">Lookup1Of2</span> <span class="o">@</span><span class="s2">&quot;</span><span class="err">\</span><span class="s2">Memory</span><span class="err">\</span><span class="s2">Available MBytes&quot;</span><span class="o">]</span> <span class="c1">//Lookup1Of2 is F# 3.0 compatiility</span>
</span></code></pre></td></tr></table></div></figure>


<p>this results</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">val</span> <span class="n">it</span> <span class="o">:</span> <span class="nc">Frame</span><span class="o">&lt;(</span><span class="kt">string</span> <span class="o">*</span> <span class="kt">int</span><span class="o">),</span><span class="kt">string</span><span class="o">&gt;</span> <span class="o">=</span>
</span><span class='line'>
</span><span class='line'>                                <span class="nc">PartitionKey</span> <span class="nc">RowKey</span>                                                                                                                                                   <span class="nc">Timestamp</span>        <span class="nc">EventTickCount</span><span class="o">:</span><span class="kt">int64</span> <span class="nc">DeploymentId</span>                     <span class="nc">Role</span>                       <span class="nc">RoleInstance</span>                    <span class="nc">CounterName</span>              <span class="nc">CounterValue</span>
</span><span class='line'><span class="err">\</span><span class="nc">Memory</span><span class="err">\</span><span class="nc">Available</span> <span class="nc">MBytes</span> <span class="mi">3</span>   <span class="o">-&gt;</span> <span class="nc">PKVALUE</span> <span class="nc">ROWKEYVALUE</span> <span class="mi">31</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">2014</span> <span class="mi">06</span><span class="o">:</span><span class="mi">39</span> <span class="mi">6</span><span class="o">.</span><span class="mi">35267</span><span class="n">E</span><span class="o">+</span><span class="mi">17</span>          <span class="mi">84011</span><span class="n">bf63b79412a86b0087cab91bdfe</span> <span class="nc">ROLE_NAME</span> <span class="nc">ROLE_INSTANCE_NAME</span> <span class="err">\</span><span class="nc">Memory</span><span class="err">\</span><span class="nc">Available</span> <span class="nc">MBytes</span> <span class="mi">384</span>
</span><span class='line'><span class="err">\</span><span class="nc">Memory</span><span class="err">\</span><span class="nc">Available</span> <span class="nc">MBytes</span> <span class="mi">10</span>  <span class="o">-&gt;</span> <span class="nc">PKVALUE</span> <span class="nc">ROWKEYVALUE</span> <span class="mi">31</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">2014</span> <span class="mi">06</span><span class="o">:</span><span class="mi">39</span> <span class="mi">6</span><span class="o">.</span><span class="mi">35267</span><span class="n">E</span><span class="o">+</span><span class="mi">17</span>          <span class="mi">84011</span><span class="n">bf63b79412a86b0087cab91bdfe</span> <span class="nc">ROLE_NAME</span> <span class="nc">ROLE_INSTANCE_NAME</span> <span class="err">\</span><span class="nc">Memory</span><span class="err">\</span><span class="nc">Available</span> <span class="nc">MBytes</span> <span class="mi">390</span>
</span><span class='line'><span class="err">\</span><span class="nc">Memory</span><span class="err">\</span><span class="nc">Available</span> <span class="nc">MBytes</span> <span class="mi">17</span>  <span class="o">-&gt;</span> <span class="nc">PKVALUE</span> <span class="nc">ROWKEYVALUE</span> <span class="mi">31</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">2014</span> <span class="mi">06</span><span class="o">:</span><span class="mi">39</span> <span class="mi">6</span><span class="o">.</span><span class="mi">35267</span><span class="n">E</span><span class="o">+</span><span class="mi">17</span>          <span class="mi">84011</span><span class="n">bf63b79412a86b0087cab91bdfe</span> <span class="nc">ROLE_NAME</span> <span class="nc">ROLE_INSTANCE_NAME</span> <span class="err">\</span><span class="nc">Memory</span><span class="err">\</span><span class="nc">Available</span> <span class="nc">MBytes</span> <span class="mi">390</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Stats module in Deedle provides statistical functions operate on series.  For example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">groupedPerf</span><span class="o">.</span><span class="nn">Rows</span><span class="p">.</span><span class="err">[</span><span class="nc">Lookup1Of2</span> <span class="o">@</span><span class="s2">&quot;</span><span class="err">\</span><span class="s2">Memory</span><span class="err">\</span><span class="s2">Available MBytes&quot;</span><span class="o">]</span> <span class="o">|&gt;</span> <span class="nn">Stats</span><span class="p">.</span><span class="n">mean</span>
</span></code></pre></td></tr></table></div></figure>


<p>results take average of Available MBytes.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val it : Series&lt;string,float> =
</span><span class='line'>  
</span><span class='line'>PartitionKey         -> 6.35267776223776E+17 
</span><span class='line'>RowKey               -> &lt;missing>            
</span><span class='line'>Timestamp            -> &lt;missing>            
</span><span class='line'>EventTickCount:int64 -> 6.35267776223776E+17 
</span><span class='line'>DeploymentId         -> &lt;missing>            
</span><span class='line'>Role                 -> &lt;missing>            
</span><span class='line'>RoleInstance         -> &lt;missing>            
</span><span class='line'>CounterName          -> &lt;missing>            
</span><span class='line'>CounterValue         -> 674.888111888112</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Note that instead of applying Stats.mean on all columns, you can apply only on CounterValue.</p></blockquote>

<p>For example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">groupedPerf</span><span class="o">.</span><span class="nn">Rows</span><span class="p">.</span><span class="err">[</span><span class="nc">Lookup1Of2</span> <span class="o">@</span><span class="s2">&quot;</span><span class="err">\</span><span class="s2">Memory</span><span class="err">\</span><span class="s2">Available MBytes&quot;</span><span class="o">].</span><span class="nn">Columns</span><span class="p">.</span><span class="err">[[&quot;</span><span class="nc">CounterName</span><span class="s2">&quot;; &quot;</span><span class="nc">CounterValue</span><span class="s2">&quot;]] </span>
</span><span class='line'><span class="s2">|&gt; Stats.mean;;</span>
</span></code></pre></td></tr></table></div></figure>


<p>results</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val it : Series&lt;string,float> =
</span><span class='line'>  
</span><span class='line'>CounterName  -> &lt;missing>     
</span><span class='line'>CounterValue -> 318.286696141</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Numpy array.argsort() in F#]]></title>
    <link href="http://udooz.github.io//blog/2014/06/python-numpy-array-dot-argsort-in-f-number/"/>
    <updated>2014-06-16T11:27:07+05:30</updated>
    <id>http://udooz.github.io//blog/2014/06/python-numpy-array-dot-argsort-in-f-number</id>
    <content type="html"><![CDATA[<p>In Python Numpy, the array.argsort returns the indices that would sort an array.</p>

<p>For example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="n">array</span> <span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">argsort</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>will give</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array([0, 4, 2, 1, 3])</span></code></pre></td></tr></table></div></figure>


<p>In F# we can do that as depicted below.</p>

<p>Let there is an array</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">k</span> <span class="o">=</span> <span class="o">[|</span> <span class="mi">1</span><span class="o">;</span> <span class="mi">5</span><span class="o">;</span> <span class="mi">3</span><span class="o">;</span> <span class="mi">7</span><span class="o">;</span> <span class="mi">2</span> <span class="o">|]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get argsort as like above</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">k</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">mapi</span> <span class="o">(</span><span class="k">fun</span> <span class="n">index</span> <span class="n">value</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="n">index</span><span class="o">))</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">sort</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">v</span> <span class="o">-&gt;</span> <span class="n">snd</span> <span class="n">v</span><span class="o">);;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Array.mapi helps to return a tuple with first element as array value and second element as index position. This array has been sorted by the first element. Finally Array.map helps to return second element of the tuple. The result is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val it : int [] = [|0; 4; 2; 1; 3|]</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Numpy array.sum(axis = 1) in F#]]></title>
    <link href="http://udooz.github.io//blog/2014/06/python-numpy-array-dot-sum-axis-equals-1-in-f-number/"/>
    <updated>2014-06-16T11:20:53+05:30</updated>
    <id>http://udooz.github.io//blog/2014/06/python-numpy-array-dot-sum-axis-equals-1-in-f-number</id>
    <content type="html"><![CDATA[<p>In Python Numpy, the array.sum enables to specify axis over which the sum is taken for elements.</p>

<p>For example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">k</span> <span class="o">=</span> <span class="n">array</span> <span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]])</span>
</span><span class='line'><span class="n">k</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will give</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array([3, 9])</span></code></pre></td></tr></table></div></figure>


<p>In F# we can do that with FSharp.PowerPack.</p>

<p>Let us define a method to perform the above feature</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">sumAxis1</span> <span class="o">(</span><span class="n">m</span><span class="o">:</span><span class="n">matrix</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">nrow</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="nc">NumRows</span>
</span><span class='line'>    <span class="nn">Matrix</span><span class="p">.</span><span class="n">foldByRow</span> <span class="o">(</span><span class="k">fun</span> <span class="n">a</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="o">+</span> <span class="n">b</span><span class="o">)</span> <span class="o">(</span><span class="nn">Vector</span><span class="p">.</span><span class="n">create</span> <span class="n">nrow</span> <span class="mi">0</span><span class="o">.)</span> <span class="n">m</span> <span class="c1">//fold by row</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us apply the above function into a matrix</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">m</span> <span class="o">=</span> <span class="n">matrix</span> <span class="o">[[</span><span class="mi">1</span><span class="o">.;</span><span class="mi">2</span><span class="o">.];</span> <span class="o">[</span><span class="mi">4</span><span class="o">.;</span><span class="mi">5</span><span class="o">.]];;</span>
</span><span class='line'><span class="n">sumAxis1</span> <span class="n">m</span><span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure>


<p>will give</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val it : Vector&lt;float> = vector [|3.0; 9.0|]</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep input data source as list of list]]></title>
    <link href="http://udooz.github.io//blog/2014/06/keep-input-data-source-as-list-of-list/"/>
    <updated>2014-06-16T00:39:03+05:30</updated>
    <id>http://udooz.github.io//blog/2014/06/keep-input-data-source-as-list-of-list</id>
    <content type="html"><![CDATA[<p>It is always better to define input data source in list of list for maths calculation. It is easy to convert them into matrix and array 2d.
For example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">d1</span> <span class="o">=</span> <span class="o">[</span> <span class="o">[</span><span class="mi">1</span><span class="o">.;</span> <span class="mi">2</span><span class="o">.];</span> <span class="o">[</span><span class="mi">3</span><span class="o">.;</span> <span class="mi">1</span><span class="o">.]];;</span>
</span></code></pre></td></tr></table></div></figure>


<p>will result</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val d1 : float list list = [[1.0; 2.0]; [3.0; 1.0]]</span></code></pre></td></tr></table></div></figure>


<p>This can be easily be converted as Matrix.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">matrix</span> <span class="n">d1</span><span class="o">;;</span> <span class="c1">// cast it to Matrix</span>
</span></code></pre></td></tr></table></div></figure>


<p>results</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val it : matrix = matrix [[1.0; 2.0]
</span><span class='line'>                          [3.0; 1.0]]</span></code></pre></td></tr></table></div></figure>


<p>To convert into Array2D by</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">array2D</span> <span class="n">d1</span><span class="o">;;</span> <span class="c1">// cast it to Array2D</span>
</span></code></pre></td></tr></table></div></figure>


<p>results</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val it : float [,] = [[1.0; 2.0]
</span><span class='line'>                      [3.0; 1.0]]</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create m x n array initialized with 1]]></title>
    <link href="http://udooz.github.io//blog/2014/06/create-mxn-array-initialized-with-1/"/>
    <updated>2014-06-15T09:29:13+05:30</updated>
    <id>http://udooz.github.io//blog/2014/06/create-mxn-array-initialized-with-1</id>
    <content type="html"><![CDATA[<p>In python numpy,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tile</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>will give</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> array([[1, 1],
</span><span class='line'>>    [1, 1],
</span><span class='line'>>    [1, 1],
</span><span class='line'>>    [1, 1],
</span><span class='line'>>    [1, 1]])</span></code></pre></td></tr></table></div></figure>


<p>similarly in F#</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nn">Array2D</span><span class="p">.</span><span class="n">init</span> <span class="mi">5</span> <span class="mi">2</span> <span class="o">(</span><span class="k">fun</span> <span class="n">i</span> <span class="n">j</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will give</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> val it : int [,] = [[1; 1]
</span><span class='line'>>                     [1; 1]
</span><span class='line'>>                     [1; 1]
</span><span class='line'>>                     [1; 1]
</span><span class='line'>>                     [1; 1]]</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
