<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[F# Scribbles]]></title>
  <link href="http://udooz.github.io/fsharpscribbles//atom.xml" rel="self"/>
  <link href="http://udooz.github.io/fsharpscribbles//"/>
  <updated>2014-06-16T10:57:29+05:30</updated>
  <id>http://udooz.github.io/fsharpscribbles//</id>
  <author>
    <name><![CDATA[M Sheik Uduman Ali]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keep input data source as list of list]]></title>
    <link href="http://udooz.github.io/fsharpscribbles//blog/2014/06/keep-input-data-source-as-list-of-list/"/>
    <updated>2014-06-16T00:39:03+05:30</updated>
    <id>http://udooz.github.io/fsharpscribbles//blog/2014/06/keep-input-data-source-as-list-of-list</id>
    <content type="html"><![CDATA[<p>It is always better to define input data source in list of list for maths calculation. It is easy to convert them into matrix and array 2d.
For example,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="n">d1</span> <span class="o">=</span> <span class="o">[</span> <span class="o">[</span><span class="mi">1</span><span class="o">.;</span> <span class="mi">2</span><span class="o">.];</span> <span class="o">[</span><span class="mi">3</span><span class="o">.;</span> <span class="mi">1</span><span class="o">.]];;</span>
</span></code></pre></td></tr></table></div></figure>


<p>will result</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val d1 : float list list = [[1.0; 2.0]; [3.0; 1.0]]</span></code></pre></td></tr></table></div></figure>


<p>This can be easily be converted as Matrix.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">matrix</span> <span class="n">d1</span><span class="o">;;</span> <span class="c1">// cast it to Matrix</span>
</span></code></pre></td></tr></table></div></figure>


<p>results</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val it : matrix = matrix [[1.0; 2.0]
</span><span class='line'>                          [3.0; 1.0]]</span></code></pre></td></tr></table></div></figure>


<p>To convert into Array2D by</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="n">array2D</span> <span class="n">d1</span><span class="o">;;</span> <span class="c1">// cast it to Array2D</span>
</span></code></pre></td></tr></table></div></figure>


<p>results</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val it : float [,] = [[1.0; 2.0]
</span><span class='line'>                      [3.0; 1.0]]</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create m x n array initialized with 1]]></title>
    <link href="http://udooz.github.io/fsharpscribbles//blog/2014/06/create-mxn-array-initialized-with-1/"/>
    <updated>2014-06-15T09:29:13+05:30</updated>
    <id>http://udooz.github.io/fsharpscribbles//blog/2014/06/create-mxn-array-initialized-with-1</id>
    <content type="html"><![CDATA[<p>In python numpy,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tile</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>will give</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> array([[1, 1],
</span><span class='line'>>    [1, 1],
</span><span class='line'>>    [1, 1],
</span><span class='line'>>    [1, 1],
</span><span class='line'>>    [1, 1]])</span></code></pre></td></tr></table></div></figure>


<p>similarly in F#</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="nn">Array2D</span><span class="p">.</span><span class="n">init</span> <span class="mi">5</span> <span class="mi">2</span> <span class="o">(</span><span class="k">fun</span> <span class="n">i</span> <span class="n">j</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will give</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> val it : int [,] = [[1; 1]
</span><span class='line'>>                     [1; 1]
</span><span class='line'>>                     [1; 1]
</span><span class='line'>>                     [1; 1]
</span><span class='line'>>                     [1; 1]]</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
